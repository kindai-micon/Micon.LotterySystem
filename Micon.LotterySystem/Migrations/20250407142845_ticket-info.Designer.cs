// <auto-generated />
using System;
using Micon.LotterySystem;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Micon.LotterySystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250407142845_ticket-info")]
    partial class ticketinfo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Micon.LotterySystem.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApplicationRoles");
                });

            modelBuilder.Entity("Micon.LotterySystem.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("Micon.LotterySystem.Models.Authority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Authorities");
                });

            modelBuilder.Entity("Micon.LotterySystem.Models.LotteryGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TicketInfoId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TicketInfoId");

                    b.ToTable("LotteryGroups");
                });

            modelBuilder.Entity("Micon.LotterySystem.Models.LotterySlots", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DeadLine")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LotteryGroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Merchandise")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfFrames")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LotteryGroupId");

                    b.ToTable("LotterySlots");
                });

            modelBuilder.Entity("Micon.LotterySystem.Models.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DisplayId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LotteryGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LotterySlotsId")
                        .HasColumnType("uuid");

                    b.Property<long>("Number")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LotteryGroupId");

                    b.HasIndex("LotterySlotsId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Micon.LotterySystem.Models.TicketInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Warning")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TicketInfo");
                });

            modelBuilder.Entity("Micon.LotterySystem.Models.Authority", b =>
                {
                    b.HasOne("Micon.LotterySystem.Models.ApplicationRole", "Role")
                        .WithMany("Authorities")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Micon.LotterySystem.Models.LotteryGroup", b =>
                {
                    b.HasOne("Micon.LotterySystem.Models.TicketInfo", "TicketInfo")
                        .WithMany()
                        .HasForeignKey("TicketInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TicketInfo");
                });

            modelBuilder.Entity("Micon.LotterySystem.Models.LotterySlots", b =>
                {
                    b.HasOne("Micon.LotterySystem.Models.LotteryGroup", "LotteryGroup")
                        .WithMany("LotterySlots")
                        .HasForeignKey("LotteryGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LotteryGroup");
                });

            modelBuilder.Entity("Micon.LotterySystem.Models.Ticket", b =>
                {
                    b.HasOne("Micon.LotterySystem.Models.LotteryGroup", "LotteryGroup")
                        .WithMany("Tickets")
                        .HasForeignKey("LotteryGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Micon.LotterySystem.Models.LotterySlots", "LotterySlots")
                        .WithMany("Tickets")
                        .HasForeignKey("LotterySlotsId");

                    b.Navigation("LotteryGroup");

                    b.Navigation("LotterySlots");
                });

            modelBuilder.Entity("Micon.LotterySystem.Models.ApplicationRole", b =>
                {
                    b.Navigation("Authorities");
                });

            modelBuilder.Entity("Micon.LotterySystem.Models.LotteryGroup", b =>
                {
                    b.Navigation("LotterySlots");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Micon.LotterySystem.Models.LotterySlots", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
